//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.1
//     from Assets/misc/baseInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""baseInputActions"",
    ""maps"": [
        {
            ""name"": ""characterController"",
            ""id"": ""90eda236-611e-4a4e-a095-320a470c7f3b"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Value"",
                    ""id"": ""55490937-8d14-4540-a1b3-bfd0de5e4222"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""dash"",
                    ""type"": ""Button"",
                    ""id"": ""03a6d116-f619-4f79-9db8-83aeead689ad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""fairySelect"",
                    ""type"": ""Value"",
                    ""id"": ""2038674b-aad1-4c96-a0b0-acc334e945cf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""triggertPlayerFeature"",
                    ""type"": ""Button"",
                    ""id"": ""d3e9e9f6-a1ec-4a87-8586-d35b7832d607"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pausemenu"",
                    ""type"": ""Button"",
                    ""id"": ""8c18c11b-2c9f-4ab3-b6ac-a4d7dacee3ff"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseWarmode"",
                    ""type"": ""Button"",
                    ""id"": ""eaf89aa8-277c-42a3-acec-0165043bedf6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""wasd"",
                    ""id"": ""836ad480-3da5-4d53-83fe-fd4ea01add35"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""7e6da583-9d20-433c-a202-ba522f05167e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""2ddd9901-7120-4c18-bf4d-68ff0d81170c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6b710388-c9ae-42b9-8fa8-3cbd8c86f9c4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""24f157e6-e60c-4c4a-ac00-2d84fccca02d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""bc352b68-9efb-4c49-8463-4afe99344e0e"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3ad08d12-83ca-477d-afb4-32ae7686696e"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""arrowKeys"",
                    ""id"": ""5d1f6e0c-f03d-4fad-bc5b-15c2f548fba5"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fairySelect"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4e96605d-5dcd-4d9f-9c86-9bcab058ab3c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""d4375258-191c-4c31-8643-428834729632"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4ca14c2c-2921-43c8-9440-58d212e250cc"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""62b40806-d9a4-4dfc-af22-1c81299f916f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""faceButtons"",
                    ""id"": ""0169ec84-5d2e-40b3-ad0b-9e2487e4c9bd"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""fairySelect"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""27110fbe-b76f-477a-b65b-538208d9b52e"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f74cc807-b2d1-4dd7-8634-0c8337361034"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d5d2c742-f3f3-40fc-9fc2-d7151df427c7"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3fdf22a-aeaa-43f1-b570-8889e8d6dc9b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""fairySelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""cd5f2fe2-4ea9-4016-9d7e-bb77bf93c859"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""triggertPlayerFeature"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df2761a2-0163-484d-9029-4359602ce54d"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""triggertPlayerFeature"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db9fb01c-3973-4051-84d4-c9cb75154fc5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Pausemenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea9700f8-4c9e-4229-a3a4-7637ebef1920"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseWarmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c8e620c-6771-4d79-9d44-293acf96e59c"",
                    ""path"": ""<XInputController>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""UseWarmode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenu"",
            ""id"": ""688017c7-0623-4a34-a916-712004926880"",
            ""actions"": [
                {
                    ""name"": ""BackButton"",
                    ""type"": ""Button"",
                    ""id"": ""dcdeccb9-b6e9-4814-9339-2b6ec7926edb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""83453d3a-c155-4f23-80d3-7046c32e6c89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3052dae1-8abc-4cc2-9d0d-c597b4c17c74"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8542e4ce-b9ab-4f6c-bcf8-2cf8044685c6"",
                    ""path"": ""<XInputController>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""BackButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e6ccb06-b607-4cc6-87af-42832f8d3c04"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenu"",
            ""id"": ""45f95ccd-a2fc-4ea6-8277-10cafbb31127"",
            ""actions"": [
                {
                    ""name"": ""Open Pause Menu"",
                    ""type"": ""Button"",
                    ""id"": ""a7a52481-45d5-419b-bfb0-2ad930e8d0a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close Pause Menu"",
                    ""type"": ""Button"",
                    ""id"": ""6d4a5965-f844-4d94-9466-c83e0aa436c3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9f43c20-198f-44cd-a48c-ec16a6875a33"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Open Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a82df386-fca7-43f4-bd61-0937acd9fd4a"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";gamepad"",
                    ""action"": ""Open Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e7590f75-a47d-4c3b-b939-e27ca6e0651d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";keyboard"",
                    ""action"": ""Close Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6add8b72-b934-4eb9-b59d-bc04009e3b2a"",
                    ""path"": ""<XInputController>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close Pause Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseMenuBack"",
            ""id"": ""4ad2a65e-1743-4cd3-8f4e-966a6e133937"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""7f095e2e-bfa6-4faf-92d0-bddc7280b309"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""074f36cf-3ab2-4339-be09-29673c4f6aa4"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Controller"",
            ""id"": ""6a917184-8dee-4ffe-83b6-a93d7d1472a2"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""6c7783c2-505e-4811-b32b-8c575f886406"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a2cb8047-c94b-4a5d-af23-2be5d0169c84"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Keyboard"",
            ""id"": ""2cf3a9bb-aa84-44c9-99f5-bacc7390c3d1"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""9a145223-1744-461e-a5ca-845303bcc751"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c06db979-670f-4c0c-b7e9-215aca78d2f5"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""keyboard"",
            ""bindingGroup"": ""keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""gamepad"",
            ""bindingGroup"": ""gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // characterController
        m_characterController = asset.FindActionMap("characterController", throwIfNotFound: true);
        m_characterController_move = m_characterController.FindAction("move", throwIfNotFound: true);
        m_characterController_dash = m_characterController.FindAction("dash", throwIfNotFound: true);
        m_characterController_fairySelect = m_characterController.FindAction("fairySelect", throwIfNotFound: true);
        m_characterController_triggertPlayerFeature = m_characterController.FindAction("triggertPlayerFeature", throwIfNotFound: true);
        m_characterController_Pausemenu = m_characterController.FindAction("Pausemenu", throwIfNotFound: true);
        m_characterController_UseWarmode = m_characterController.FindAction("UseWarmode", throwIfNotFound: true);
        // MainMenu
        m_MainMenu = asset.FindActionMap("MainMenu", throwIfNotFound: true);
        m_MainMenu_BackButton = m_MainMenu.FindAction("BackButton", throwIfNotFound: true);
        m_MainMenu_Interact = m_MainMenu.FindAction("Interact", throwIfNotFound: true);
        // PauseMenu
        m_PauseMenu = asset.FindActionMap("PauseMenu", throwIfNotFound: true);
        m_PauseMenu_OpenPauseMenu = m_PauseMenu.FindAction("Open Pause Menu", throwIfNotFound: true);
        m_PauseMenu_ClosePauseMenu = m_PauseMenu.FindAction("Close Pause Menu", throwIfNotFound: true);
        // PauseMenuBack
        m_PauseMenuBack = asset.FindActionMap("PauseMenuBack", throwIfNotFound: true);
        m_PauseMenuBack_Newaction = m_PauseMenuBack.FindAction("New action", throwIfNotFound: true);
        // Controller
        m_Controller = asset.FindActionMap("Controller", throwIfNotFound: true);
        m_Controller_Newaction = m_Controller.FindAction("New action", throwIfNotFound: true);
        // Keyboard
        m_Keyboard = asset.FindActionMap("Keyboard", throwIfNotFound: true);
        m_Keyboard_Newaction = m_Keyboard.FindAction("New action", throwIfNotFound: true);
    }

    ~@BaseInputActions()
    {
        UnityEngine.Debug.Assert(!m_characterController.enabled, "This will cause a leak and performance issues, BaseInputActions.characterController.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MainMenu.enabled, "This will cause a leak and performance issues, BaseInputActions.MainMenu.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PauseMenu.enabled, "This will cause a leak and performance issues, BaseInputActions.PauseMenu.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_PauseMenuBack.enabled, "This will cause a leak and performance issues, BaseInputActions.PauseMenuBack.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Controller.enabled, "This will cause a leak and performance issues, BaseInputActions.Controller.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Keyboard.enabled, "This will cause a leak and performance issues, BaseInputActions.Keyboard.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // characterController
    private readonly InputActionMap m_characterController;
    private List<ICharacterControllerActions> m_CharacterControllerActionsCallbackInterfaces = new List<ICharacterControllerActions>();
    private readonly InputAction m_characterController_move;
    private readonly InputAction m_characterController_dash;
    private readonly InputAction m_characterController_fairySelect;
    private readonly InputAction m_characterController_triggertPlayerFeature;
    private readonly InputAction m_characterController_Pausemenu;
    private readonly InputAction m_characterController_UseWarmode;
    public struct CharacterControllerActions
    {
        private @BaseInputActions m_Wrapper;
        public CharacterControllerActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_characterController_move;
        public InputAction @dash => m_Wrapper.m_characterController_dash;
        public InputAction @fairySelect => m_Wrapper.m_characterController_fairySelect;
        public InputAction @triggertPlayerFeature => m_Wrapper.m_characterController_triggertPlayerFeature;
        public InputAction @Pausemenu => m_Wrapper.m_characterController_Pausemenu;
        public InputAction @UseWarmode => m_Wrapper.m_characterController_UseWarmode;
        public InputActionMap Get() { return m_Wrapper.m_characterController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterControllerActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterControllerActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @dash.started += instance.OnDash;
            @dash.performed += instance.OnDash;
            @dash.canceled += instance.OnDash;
            @fairySelect.started += instance.OnFairySelect;
            @fairySelect.performed += instance.OnFairySelect;
            @fairySelect.canceled += instance.OnFairySelect;
            @triggertPlayerFeature.started += instance.OnTriggertPlayerFeature;
            @triggertPlayerFeature.performed += instance.OnTriggertPlayerFeature;
            @triggertPlayerFeature.canceled += instance.OnTriggertPlayerFeature;
            @Pausemenu.started += instance.OnPausemenu;
            @Pausemenu.performed += instance.OnPausemenu;
            @Pausemenu.canceled += instance.OnPausemenu;
            @UseWarmode.started += instance.OnUseWarmode;
            @UseWarmode.performed += instance.OnUseWarmode;
            @UseWarmode.canceled += instance.OnUseWarmode;
        }

        private void UnregisterCallbacks(ICharacterControllerActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @dash.started -= instance.OnDash;
            @dash.performed -= instance.OnDash;
            @dash.canceled -= instance.OnDash;
            @fairySelect.started -= instance.OnFairySelect;
            @fairySelect.performed -= instance.OnFairySelect;
            @fairySelect.canceled -= instance.OnFairySelect;
            @triggertPlayerFeature.started -= instance.OnTriggertPlayerFeature;
            @triggertPlayerFeature.performed -= instance.OnTriggertPlayerFeature;
            @triggertPlayerFeature.canceled -= instance.OnTriggertPlayerFeature;
            @Pausemenu.started -= instance.OnPausemenu;
            @Pausemenu.performed -= instance.OnPausemenu;
            @Pausemenu.canceled -= instance.OnPausemenu;
            @UseWarmode.started -= instance.OnUseWarmode;
            @UseWarmode.performed -= instance.OnUseWarmode;
            @UseWarmode.canceled -= instance.OnUseWarmode;
        }

        public void RemoveCallbacks(ICharacterControllerActions instance)
        {
            if (m_Wrapper.m_CharacterControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterControllerActions @characterController => new CharacterControllerActions(this);

    // MainMenu
    private readonly InputActionMap m_MainMenu;
    private List<IMainMenuActions> m_MainMenuActionsCallbackInterfaces = new List<IMainMenuActions>();
    private readonly InputAction m_MainMenu_BackButton;
    private readonly InputAction m_MainMenu_Interact;
    public struct MainMenuActions
    {
        private @BaseInputActions m_Wrapper;
        public MainMenuActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @BackButton => m_Wrapper.m_MainMenu_BackButton;
        public InputAction @Interact => m_Wrapper.m_MainMenu_Interact;
        public InputActionMap Get() { return m_Wrapper.m_MainMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Add(instance);
            @BackButton.started += instance.OnBackButton;
            @BackButton.performed += instance.OnBackButton;
            @BackButton.canceled += instance.OnBackButton;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(IMainMenuActions instance)
        {
            @BackButton.started -= instance.OnBackButton;
            @BackButton.performed -= instance.OnBackButton;
            @BackButton.canceled -= instance.OnBackButton;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(IMainMenuActions instance)
        {
            if (m_Wrapper.m_MainMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuActions @MainMenu => new MainMenuActions(this);

    // PauseMenu
    private readonly InputActionMap m_PauseMenu;
    private List<IPauseMenuActions> m_PauseMenuActionsCallbackInterfaces = new List<IPauseMenuActions>();
    private readonly InputAction m_PauseMenu_OpenPauseMenu;
    private readonly InputAction m_PauseMenu_ClosePauseMenu;
    public struct PauseMenuActions
    {
        private @BaseInputActions m_Wrapper;
        public PauseMenuActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenPauseMenu => m_Wrapper.m_PauseMenu_OpenPauseMenu;
        public InputAction @ClosePauseMenu => m_Wrapper.m_PauseMenu_ClosePauseMenu;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenu; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Add(instance);
            @OpenPauseMenu.started += instance.OnOpenPauseMenu;
            @OpenPauseMenu.performed += instance.OnOpenPauseMenu;
            @OpenPauseMenu.canceled += instance.OnOpenPauseMenu;
            @ClosePauseMenu.started += instance.OnClosePauseMenu;
            @ClosePauseMenu.performed += instance.OnClosePauseMenu;
            @ClosePauseMenu.canceled += instance.OnClosePauseMenu;
        }

        private void UnregisterCallbacks(IPauseMenuActions instance)
        {
            @OpenPauseMenu.started -= instance.OnOpenPauseMenu;
            @OpenPauseMenu.performed -= instance.OnOpenPauseMenu;
            @OpenPauseMenu.canceled -= instance.OnOpenPauseMenu;
            @ClosePauseMenu.started -= instance.OnClosePauseMenu;
            @ClosePauseMenu.performed -= instance.OnClosePauseMenu;
            @ClosePauseMenu.canceled -= instance.OnClosePauseMenu;
        }

        public void RemoveCallbacks(IPauseMenuActions instance)
        {
            if (m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuActions @PauseMenu => new PauseMenuActions(this);

    // PauseMenuBack
    private readonly InputActionMap m_PauseMenuBack;
    private List<IPauseMenuBackActions> m_PauseMenuBackActionsCallbackInterfaces = new List<IPauseMenuBackActions>();
    private readonly InputAction m_PauseMenuBack_Newaction;
    public struct PauseMenuBackActions
    {
        private @BaseInputActions m_Wrapper;
        public PauseMenuBackActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_PauseMenuBack_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_PauseMenuBack; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseMenuBackActions set) { return set.Get(); }
        public void AddCallbacks(IPauseMenuBackActions instance)
        {
            if (instance == null || m_Wrapper.m_PauseMenuBackActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PauseMenuBackActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IPauseMenuBackActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IPauseMenuBackActions instance)
        {
            if (m_Wrapper.m_PauseMenuBackActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPauseMenuBackActions instance)
        {
            foreach (var item in m_Wrapper.m_PauseMenuBackActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PauseMenuBackActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PauseMenuBackActions @PauseMenuBack => new PauseMenuBackActions(this);

    // Controller
    private readonly InputActionMap m_Controller;
    private List<IControllerActions> m_ControllerActionsCallbackInterfaces = new List<IControllerActions>();
    private readonly InputAction m_Controller_Newaction;
    public struct ControllerActions
    {
        private @BaseInputActions m_Wrapper;
        public ControllerActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Controller_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Controller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerActions set) { return set.Get(); }
        public void AddCallbacks(IControllerActions instance)
        {
            if (instance == null || m_Wrapper.m_ControllerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IControllerActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IControllerActions instance)
        {
            if (m_Wrapper.m_ControllerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IControllerActions instance)
        {
            foreach (var item in m_Wrapper.m_ControllerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ControllerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ControllerActions @Controller => new ControllerActions(this);

    // Keyboard
    private readonly InputActionMap m_Keyboard;
    private List<IKeyboardActions> m_KeyboardActionsCallbackInterfaces = new List<IKeyboardActions>();
    private readonly InputAction m_Keyboard_Newaction;
    public struct KeyboardActions
    {
        private @BaseInputActions m_Wrapper;
        public KeyboardActions(@BaseInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_Keyboard_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_Keyboard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyboardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyboardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IKeyboardActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IKeyboardActions instance)
        {
            if (m_Wrapper.m_KeyboardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyboardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyboardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyboardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyboardActions @Keyboard => new KeyboardActions(this);
    private int m_keyboardSchemeIndex = -1;
    public InputControlScheme keyboardScheme
    {
        get
        {
            if (m_keyboardSchemeIndex == -1) m_keyboardSchemeIndex = asset.FindControlSchemeIndex("keyboard");
            return asset.controlSchemes[m_keyboardSchemeIndex];
        }
    }
    private int m_gamepadSchemeIndex = -1;
    public InputControlScheme gamepadScheme
    {
        get
        {
            if (m_gamepadSchemeIndex == -1) m_gamepadSchemeIndex = asset.FindControlSchemeIndex("gamepad");
            return asset.controlSchemes[m_gamepadSchemeIndex];
        }
    }
    public interface ICharacterControllerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnFairySelect(InputAction.CallbackContext context);
        void OnTriggertPlayerFeature(InputAction.CallbackContext context);
        void OnPausemenu(InputAction.CallbackContext context);
        void OnUseWarmode(InputAction.CallbackContext context);
    }
    public interface IMainMenuActions
    {
        void OnBackButton(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
    public interface IPauseMenuActions
    {
        void OnOpenPauseMenu(InputAction.CallbackContext context);
        void OnClosePauseMenu(InputAction.CallbackContext context);
    }
    public interface IPauseMenuBackActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IControllerActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IKeyboardActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
}
